{"version":3,"sources":["../src/app.js"],"names":["app","use","contentSecurityPolicy","express","path","join","__dirname","post","req","res","process","nextTick","html","body","buff","Buffer","from","then","pdf","set","length","send","err","json","message","error","next","query","apikey","status","toString"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,GAAG,GAAG,0BAAZ;AAEAA,GAAG,CAACC,GAAJ,CAAQ,uBAAR;AACAD,GAAG,CAACC,GAAJ,CAAQ,8BAAR;AACAD,GAAG,CAACC,GAAJ,CAAQ,wBAAO;AACbC,EAAAA,qBAAqB,EAAE;AADV,CAAP,CAAR;AAIAF,GAAG,CAACC,GAAJ,CAAQE,8BAAeC,iBAAKC,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAAf,CAAR;AAEAN,GAAG,CAACO,IAAJ,CAAS,SAAT,EAAoB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAChCC,EAAAA,OAAO,CAACC,QAAR,CAAiB,YAAM;AACrB,QAAIC,IAAI,GAAGJ,GAAG,CAACK,IAAJ,CAASD,IAApB;AACA,QAAIE,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkB,QAAlB,CAAX;AACA,2BAAUE,IAAV,EACGG,IADH,CACQ,UAACC,GAAD,EAAS;AACbT,MAAAA,GAAG,CAACU,GAAJ,CAAQ;AACN,wBAAgB,iBADV;AAEN,0BAAkBD,GAAG,CAACE,MAFhB;AAGN;AAHM,OAAR;AAKAX,MAAAA,GAAG,CAACY,IAAJ,CAASH,GAAT;AACD,KARH,WASS,UAACI,GAAD,EAAS;AACdb,MAAAA,GAAG,CAACc,IAAJ,CAAS;AACPC,QAAAA,OAAO,EAAE,OADF;AAEPC,QAAAA,KAAK,EAAEH,GAAG,CAACE;AAFJ,OAAT;AAID,KAdH;AAeD,GAlBD;AAmBD,CApBD;AAuBAxB,GAAG,CAACO,IAAJ,CAAS,UAAT,EAAqB,UAACC,GAAD,EAAMC,GAAN,EAAWiB,IAAX,EAAoB;AACvC,MAAIlB,GAAG,CAACmB,KAAJ,CAAUC,MAAV,IAAoB,QAAxB,EAAkC;AAChCF,IAAAA,IAAI;AACL,GAFD,MAEO;AACLjB,IAAAA,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB;AACnBC,MAAAA,OAAO,EAAE;AADU,KAArB;AAGD;AACF,CARD,EAQG,UAAChB,GAAD,EAAMC,GAAN,EAAc;AACfC,EAAAA,OAAO,CAACC,QAAR,CAAiB,YAAM;AACrB,QAAIC,IAAI,GAAGJ,GAAG,CAACK,IAAJ,CAASD,IAApB;AACA,QAAIE,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkB,QAAlB,CAAX;AACA,2BAAUE,IAAV,EACGG,IADH,CACQ,UAACC,GAAD,EAAS;AACbT,MAAAA,GAAG,CAACY,IAAJ,CAASH,GAAG,CAACY,QAAJ,CAAa,QAAb,CAAT;AACD,KAHH,WAIS,UAACR,GAAD,EAAS;AACdb,MAAAA,GAAG,CAACc,IAAJ,CAAS;AACPC,QAAAA,OAAO,EAAE,OADF;AAEPC,QAAAA,KAAK,EAAEH,GAAG,CAACE;AAFJ,OAAT;AAID,KATH;AAUD,GAbD;AAcD,CAvBD;eAyBexB,G","sourcesContent":["import express from 'express'\r\nimport { json } from 'body-parser'\r\nimport helmet from 'helmet'\r\nimport compression from 'compression'\r\nimport path from 'path'\r\nimport { createPdf } from './helper'\r\n\r\nconst app = express()\r\n\r\napp.use(json())\r\napp.use(compression())\r\napp.use(helmet({\r\n  contentSecurityPolicy: false,\r\n}))\r\n\r\napp.use(express.static(path.join(__dirname, '../static')))\r\n\r\napp.post('/genpdf', (req, res) => {\r\n  process.nextTick(() => {\r\n    let html = req.body.html\r\n    let buff = Buffer.from(html, 'base64')\r\n    createPdf(buff)\r\n      .then((pdf) => {\r\n        res.set({\r\n          'Content-Type': 'application/pdf',\r\n          'Content-Length': pdf.length,\r\n          'Content-disposition': `inline; filename=test.pdf`\r\n        })\r\n        res.send(pdf)\r\n      })\r\n      .catch((err) => {\r\n        res.json({\r\n          message: 'error',\r\n          error: err.message\r\n        })\r\n      })\r\n  })\r\n})\r\n\r\n\r\napp.post('/genpdf2', (req, res, next) => {\r\n  if (req.query.apikey == 'ABCDEF') {\r\n    next()\r\n  } else {\r\n    res.status(401).json({\r\n      message: 'unauthorized'\r\n    })\r\n  }\r\n}, (req, res) => {\r\n  process.nextTick(() => {\r\n    let html = req.body.html\r\n    let buff = Buffer.from(html, 'base64')\r\n    createPdf(buff)\r\n      .then((pdf) => {\r\n        res.send(pdf.toString('base64'))\r\n      })\r\n      .catch((err) => {\r\n        res.json({\r\n          message: 'error',\r\n          error: err.message\r\n        })\r\n      })\r\n  })\r\n})\r\n\r\nexport default app"],"file":"app.js"}